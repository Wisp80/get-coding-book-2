const canvas = document.getElementsByClassName('canvas-one')[0];
const ctx = canvas.getContext('2d');

window.onload = function () {
    controls.initializePlayersControlsListening();
};

/*-------------------------------------------------------------------------------------------------------------*/

const helper = {
    checkIntersectionBetweenTwoNotRotatedRectangles: function (
        farX1, closeX2,
        closeX1, farX2,
        farY1, closeY2,
        closeY1, farY2
    ) {
        if (farX1 >= closeX2 &&
            closeX1 <= farX2 &&
            farY1 >= closeY2 &&
            closeY1 <= farY2) {
            return true;
        } else {
            return false;
        };
    },

    findTheSmallestElementInArrayOfNumbers: function (arr) {
        let smallestElement = null;

        if (arr.length > 0) {
            for (let i = 0; i < arr.length; i++) {
                if (!smallestElement) {
                    smallestElement = arr[i];
                } else if (arr[i] < smallestElement) {
                    smallestElement = arr[i];
                };
            };
        };

        return smallestElement;
    },

    getRandomColor: function () {
        let letters = '0123456789ABCDEF';
        let color = '#';

        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        };

        return color;
    },
};

/*-------------------------------------------------------------------------------------------------------------*/

const ui = {
    pressPlayButton: function () {
        game.tick();
        document.getElementsByClassName('play-button')[0].disabled = true;

        audio.initiateBackgroudMusicLooping();
        audio.playSound(audio.defaultBackgroundMusic);
    },

    pressResetButton: function () {
        game.reset();
        game.tick();
    },

    pressSoundButton: function () {
        if (document.getElementsByClassName('sound-off-on-button')[0].innerHTML === 'üîä') {
            document.getElementsByClassName('sound-off-on-button')[0].innerHTML = 'üîá'
            audio.defaultBackgroundMusic.muted = true;
            audio.generateLoseSound().muted = true;
        } else {
            document.getElementsByClassName('sound-off-on-button')[0].innerHTML = 'üîä'
            audio.defaultBackgroundMusic.muted = false;
            audio.generateLoseSound().muted = false;
        };
    }
};

/*-------------------------------------------------------------------------------------------------------------*/

const game = {
    tickTimeout: null,
    tickRate: 1000 / 60,
    ticks: 0,
    worldSpeed: 16, // –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—Ä–∞.
    maxWorldSpeed: 100,
    highestFloor: canvas.height / 2, /*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Ç–∞–π–ª–∞.*/
    autoScroll: true, // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –º–∏—Ä –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    tilesPassed: 0,
    distanceTravelled: 0,
    tempWallID: 2, // ID –¥–ª—è —Å—Ç–µ–Ω –ø—Ä–∏ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–∏.

    wallWidth: 950, // –®–∏—Ä–∏–Ω–∞ —Å—Ç–µ–Ω.
    maximumWallHeight: canvas.height / 2, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞–∫–æ–π-–ª–∏–±–æ —Å—Ç–µ–Ω—ã.
    minimumWallHeight: 50, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞–∫–æ–π-–ª–∏–±–æ —Å—Ç–µ–Ω—ã.
    maximumWallAtOneTIme: 5, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–µ–Ω, –æ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –º–æ–∂–µ–º –∏–º–µ—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    playerHeightMultiplayer: 2, /*–ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã—Å–æ—Ç—ã –∏–≥—Ä–æ–∫–∞, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–∫—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –º–æ–∂–µ—Ç –∑–∞–ø—Ä—ã–≥–Ω—É—Ç—å –∏–≥—Ä–æ–∫ c —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–µ–Ω—ã.*/
    differnceBetweenCurrentLastWallAndNewWall: 100, /*–ß–∏—Å–ª–æ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–µ–Ω—ã.*/
    newWallLowHeightEnhancer: 60, /*–ß–∏—Å–ª–æ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Å–æ—Ç—É —Å–ª–µ–¥—É—é—â–µ —Å—Ç–µ–Ω—ã, 
    –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–µ–∂–¥—É —ç—Ç–æ–π —Å—Ç–µ–Ω—ã –∏ –ø—Ä–µ–¥—ã–¥—É–¥—â–µ–π —Ç–µ–∫—É—â–µ–π —Å—Ç–µ–Ω–æ–π.*/


    stopWorld: function () { // –ú–µ—Ç–æ–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ –º–∏—Ä –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç—Å—è.
        this.autoScroll = false;
    },

    tick: function () {
        window.clearTimeout(game.tickTimeout);
        if (players.playerOne.isActive) {
            game.prepareDataForNextTick();
            window.requestAnimationFrame(game.renderPreparedDataForNextTick);
            game.tickTimeout = window.setTimeout('game.tick()', game.tickRate);
        };
    },

    reset: function () {
        audio.pauseSound(audio.defaultBackgroundMusic);
        audio.playSound(audio.defaultBackgroundMusic);

        game.autoScroll = true;
        game.worldSpeed = 16;
        game.ticks = 0;
        game.tilesPassed = 0;
        game.distanceTravelled = 0;
        game.tempWallID = 2;

        players.playerOne.isActive = true;
        players.playerOne.currentSpeedX = 0;
        players.playerOne.currentSpeedY = 0;
        players.playerOne.x = 300;
        players.playerOne.y = 485;

        walls = [
            new Wall(
                0, 550,
                1200, 450,
                helper.getRandomColor(), 1,
                2
            )
        ];
    },

    generateBackground: function () {
        let tempBackground = new Background('./src/images/background-two.png', backgrounds[backgrounds.length - 1].x + 800, 115);
        backgrounds.push(tempBackground);
    },

    prepareDataForNextTick: function () {
        if (this.ticks % 600 === 0) {
            this.generateBackground();
            console.log(backgrounds);
        };

        for (let i = 0; i < backgrounds.length; i++) {
            if (backgrounds[i].x + 800 < 0) {
                backgrounds.splice(i, 1);
            };
        };

        players.playerOne.checkIfPlayerIsInAPit();
        game.cleanOldTiles();
        game.addFutureWalls(
            this.maximumWallAtOneTIme,
            this.playerHeightMultiplayer,
            this.minimumWallHeight,
            this.differnceBetweenCurrentLastWallAndNewWall,
            this.newWallLowHeightEnhancer
        );
        players.playerOne.move();

        if (!players.playerOne.isActive) { // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –º–∏—Ä–∞.
            if (document.getElementsByClassName('sound-off-on-button')[0].innerHTML === 'üîä') {
                audio.playSound(audio.generateLoseSound());
            };
            audio.pauseSound(audio.defaultBackgroundMusic);
            game.stopWorld();
        };

        if (this.autoScroll) { // –ü–æ–∫–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç—Å—è –º–∏—Ä, –¥–≤–∏–≥–∞–µ–º —Å—Ç–µ–Ω—ã.
            for (let i = 0; i < walls.length; i++) {
                walls[i].move(game.worldSpeed);
            };

            for (let j = 0; j < backgrounds.length; j++) {
                backgrounds[j].move(1);
            };
        };

        this.calculateDistanceTravelled();
        this.ticks++;
    },

    addFutureWalls: function (
        maximumWallAtOneTIme,
        playerHeightMultiplayer,
        minimumWallHeight,
        differnceBetweenCurrentLastWallAndNewWall,
        newWallLowHeightEnhancer
    ) {
        if (walls.length >= maximumWallAtOneTIme) { /*–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏–º—É–º 4 —Å—Ç–µ–Ω, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.*/
            return;
        };

        /*–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–µ–Ω–µ –≤ –º–∞—Å—Å–∏–≤–µ –¥–ª—è —Å—Ç–µ–Ω.*/
        let currentLastWall = walls[walls.length - 1];

        /*–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –º–æ–∂–µ—Ç –∑–∞–ø—Ä—ã–≥–Ω—É—Ç—å –∏–≥—Ä–æ–∫ c —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–µ–Ω—ã.*/
        let biggestJumpableHeight = currentLastWall.height + (players.playerOne.accelerationY - players.playerOne.gravity) * playerHeightMultiplayer;

        /*–ï—Å–ª–∏ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç –∑–∞–ø—Ä—ã–≥–Ω—É—Ç—å –∏–≥—Ä–æ–∫ c —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–µ–Ω—ã –æ–∫–∞–∑–∞–ª–∞—Å—å –±–æ–ª—å—à–µ, 
        —á–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Å—Ç–µ–Ω—ã, —Ç–æ –º—ã –¥–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é 
        –º–æ–∂–µ—Ç –∑–∞–ø—Ä—ã–≥–Ω—É—Ç—å –∏–≥—Ä–æ–∫ c —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–µ–Ω—ã –±—ã–ª–∞ —Ä–∞–≤–Ω–∞ —ç—Ç–æ–º—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–µ–Ω—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é
        –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä—ã–≥–Ω—É—Ç—å.*/
        if (biggestJumpableHeight > this.maximumWallHeight) {
            biggestJumpableHeight = this.maximumWallHeight;
        };

        /*–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–µ–Ω—ã. –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –±—É–¥–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã, –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π 
        –≤—ã—Å–æ—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∑–∞–ø—Ä—ã–≥–Ω—É—Ç—å –∏–≥—Ä–æ–∫ c —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–µ–Ω—ã, –ø–ª—é—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞.*/
        let newWallHeight = Math.floor(Math.random() * biggestJumpableHeight) + minimumWallHeight;

        /*–ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–µ–Ω–∞ –Ω–∏–∂–µ, —á–µ–º —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç–µ–Ω–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å, –∏ –∏—Ö —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ –≤—ã—Å–æ—Ç–µ –º–µ–Ω—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è,
        —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å—á–∏—Ç–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–µ–Ω—ã.*/
        if (currentLastWall.height < newWallHeight && Math.abs(newWallHeight - currentLastWall.height) < differnceBetweenCurrentLastWallAndNewWall) {
            newWallHeight = newWallHeight + newWallLowHeightEnhancer;
        };

        /*–í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–µ–Ω—ã, —Ç–æ –µ—Å—Ç—å —Ç–∞–º, –≥–¥–µ –∫–æ–Ω—á–∞–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–µ–Ω—ã.*/
        let newWallX = currentLastWall.x + currentLastWall.width;

        if (this.tilesPassed % Math.floor(5 * Math.random()) === 0) {
            let newWallShift = Math.floor(400 * Math.random());

            if (newWallShift <= 200) {
                newWallShift = 200;
            };

            newWallX += newWallShift;
        };

        /*–°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∞–π–ª–∞.*/
        let newWall = new Wall(newWallX, canvas.height - newWallHeight, canvas.width - 600, newWallHeight, helper.getRandomColor(), this.tempWallID, 2);
        walls.push(newWall); /*–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç–µ–Ω.*/

        this.tempWallID++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–µ–Ω—ã. 
    },

    /*–ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.*/
    cleanOldTiles: function () {
        for (const i in walls) {
            /*–ú—ã –Ω–µ –≤–∏–¥–∏–º –∫–∞–∫–æ–π-–ª–∏–±–æ —Ç–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—à–µ–ª –∑–∞ —ç–∫—Ä–∞–Ω, —Ç–æ –µ—Å—Ç—å –Ω–∞ 700 –ø–∏–∫—Å–µ–ª–µ–π –≤–ª–µ–≤–æ –æ—Ç 0. –≠—Ç–æ
            –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ä–∞–≤–Ω–∞ -700.*/
            if (walls[i].x <= -walls[i].width) {
                walls.splice(i, 1); /*–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–π–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–ª–∞–º.*/
                this.tilesPassed++; /*–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤.*/

                if (this.tilesPassed % 3 === 0 && this.worldSpeed < this.maxWorldSpeed) { /*–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—Ä–∞
                –∫–∞–∂–¥—ã–µ 3 –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–π–ª–∞.*/
                    this.worldSpeed++;
                };
            };
        };
    },

    calculateDistanceTravelled: function () {
        this.distanceTravelled += this.worldSpeed;
    },

    renderPreparedDataForNextTick: function () {
        ctx.fillStyle = '#00a8f3';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        for (let i = 0; i < backgrounds.length; i++) {
            backgrounds[i].drawBackground();
        };

        for (let i = 0; i < walls.length; i++) {
            walls[i].draw();
        };

        players.playerOne.draw();

        ctx.fillStyle = 'white';
        ctx.font = '35px Arial';
        ctx.fillText('–°–∫–æ—Ä–æ—Å—Ç—å: ' + game.worldSpeed, 10, 40); /*–í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—Ä–∞.*/
        ctx.fillText('–ü—Ä–æ–π–¥–µ–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ' + game.distanceTravelled, 10, 80); /*–í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ —Ç–æ–º, –∫–∞–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ.*/
        ctx.fillText('–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–∞–π–ª–æ–≤: ' + game.tilesPassed, 10, 120); /*–í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ —Ç–æ–º, –∫–∞–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ.*/

        ctx.strokeStyle = 'red';
        ctx.fillStyle = players.playerOne.color;
        ctx.strokeRect(550, 20, players.playerOne.maxJumpedDistance, 50);
        if (players.playerOne.currentAccelerationY !== 0) {
            ctx.fillRect(551, 21, players.playerOne.currentJumpedDistance, 48);
        } else {
            ctx.fillRect(551, 21, players.playerOne.maxJumpedDistance, 48);
        };
    },
};

/*-------------------------------------------------------------------------------------------------------------*/

const controls = {
    isUpKeyPressed: false,

    initializePlayersControlsListening: function () {
        window.addEventListener('keydown', (event) => {
            switch (event.key) {
                case 'w':
                    this.isUpKeyPressed = true;
                    break;

                default:
                    break;
            };
        }, false);

        window.addEventListener('keyup', (event) => {
            switch (event.key) {
                case 'w':
                    this.isUpKeyPressed = false;
                    break;

                default:
                    break;
            };
        }, false);
    },
};

/*-------------------------------------------------------------------------------------------------------------*/

const players = {
    playerOne: new Player(),
};

function Player(
    x, y,
    width, height,
    currentSpeedX, currentSpeedY,
    maxSpeedX, maxSpeedY,
    accelerationY, gravity,
    velocityX, friction,
    color, src
) {
    this.x = 300;
    this.y = 485;
    this.width = 40;
    this.height = 60;
    this.currentSpeedX = 0;
    this.currentSpeedY = 0;
    this.maxSpeedX = 10;
    this.maxSpeedY = 26;
    this.currentAccelerationY = 20;
    this.accelerationY = 20;
    this.gravity = 2;
    this.accelerationX = 1;
    this.friction = 0.6; // [0; 1] —Ç—Ä–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è.
    this.color = 'orange';
    this.src = './src/images/human2.png'
    this.isActive = true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—à –∏–≥—Ä–æ–∫.

    this.isPlayerOnTheFloor = false;
    this.currentJumpedDistance = 0;
    this.maxJumpedDistance = 640;

    this.predictedHorizontalWayToTheRight = null;
    this.predictedHorizontalWayToTheLeft = null;
    this.predictedVerticalWayDown = null;
    this.predictedVerticalWayUp = null;

    this.predictCollision = function () {
        /*–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –≥–¥–µ –æ–∫–∞–∂–µ—Ç—Å—è –∏–≥—Ä–æ–∫ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫, –µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ Y.*/
        let predictedVerticalPosition = {
            x: this.x,
            y: this.y + this.currentSpeedY,
            width: this.width,
            height: this.height
        };

        /*–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—É–¥–µ—Ç –ª–∏ –∫–æ–ª–ª–∏–∑–∏–∏ –ø–æ X –∏–ª–∏ Y –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ —Å—Ç–µ–Ω–∞–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ.*/
        for (let i = 0; i < walls.length; i++) { // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç–µ–Ω—É.

            /*–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—É–¥–µ—Ç –ª–∏ –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ —Å—Ç–µ–Ω–∞–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ X.*/
            if (helper.checkIntersectionBetweenTwoNotRotatedRectangles(
                this.x + this.width, walls[i].x,
                this.x, walls[i].x + walls[i].width,
                this.y + this.height, walls[i].y,
                this.y, walls[i].y + walls[i].height)
            ) {
                this.isActive = false;
            };

            /*–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—É–¥–µ—Ç –ª–∏ –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ —Å—Ç–µ–Ω–∞–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ Y.*/
            if (helper.checkIntersectionBetweenTwoNotRotatedRectangles(
                predictedVerticalPosition.x + predictedVerticalPosition.width, walls[i].x,
                predictedVerticalPosition.x, walls[i].x + walls[i].width,
                predictedVerticalPosition.y + predictedVerticalPosition.height, walls[i].y,
                predictedVerticalPosition.y, walls[i].y + walls[i].height)
            ) {
                /*–ï—Å–ª–∏ —Ç–∞–∫–∞—è –∫–æ–ª–ª–∏–∑–∏—è –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞ —Ç–∞–∫–∞—è –∫–æ–ª–ª–∏–∑–∏—è –∏–º–µ–µ—Ç –º–µ—Å—Ç–æ –±—ã—Ç—å, —Å–¥–≤–∏–≥–∞–µ–º –ø–æ Y –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é
                –ø—Ä–æ–µ–∫—Ü–∏—é –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ, –±–ª–∏–∂–µ –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 1 –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ 
                –Ω–µ –ø—Ä–æ–ø–∞–¥–µ—Ç –∫–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –∏–≥—Ä–æ–∫–∞ –∏ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç–µ–Ω–æ–π.*/
                while (helper.checkIntersectionBetweenTwoNotRotatedRectangles(
                    predictedVerticalPosition.x + predictedVerticalPosition.width, walls[i].x,
                    predictedVerticalPosition.x, walls[i].x + walls[i].width,
                    predictedVerticalPosition.y + predictedVerticalPosition.height, walls[i].y,
                    predictedVerticalPosition.y, walls[i].y + walls[i].height)
                ) {
                    if (this.isActive) {
                        predictedVerticalPosition.y -= Math.sign(this.currentSpeedY);
                    } else {
                        predictedVerticalPosition.y -= 1;
                    };
                };

                /*–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ–º —Å–¥–≤–∏–≥–∞—Ç—å –ø–æ Y –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–æ–µ–∫—Ü–∏—é –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ, –±–ª–∏–∂–µ 
                –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞, —Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –º—ã –∏–º–µ–µ–º —Å–∞–º—É—é –±–ª–∏–∑–∫—É –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–∫–∞,
                –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç –∫–∞—Å–∞—Ç—å—Å—è –∫–∞–∫–æ–π-—Ç–æ —Å—Ç–µ–Ω—ã, –Ω–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–µ–µ. –ü–æ—ç—Ç–æ–º—É —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
                —ç—Ç–æ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–∫—É—â–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π Y –∏–≥—Ä–æ–∫–∞ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ Y, —á—Ç–æ–±—ã –æ–Ω –Ω–µ
                –ø—ã—Ç–∞–ª—Å—è –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –≤ —Å—Ç–µ–Ω—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ü–∏–∫–ª–∞ "while".*/
                if (this.isActive) {
                    this.y = predictedVerticalPosition.y;
                    this.currentSpeedY = 0;
                    this.isPlayerOnTheFloor = true;
                };
            };
        };

        /*----------------------------*/

        /*–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫, –µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ X.*/
        if (game.worldSpeed > 0) { // –ï—Å–ª–∏ –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ.
            this.predictedHorizontalWayToTheRight = {
                x: this.x + this.width,
                y: this.y,
                width: game.worldSpeed - this.width,
                height: this.height
            };
        } else {
            this.predictedHorizontalWayToTheRight = null;
        };

        if (Math.abs(this.currentSpeedX) > this.width) {
            if (this.currentSpeedX < 0) { // –ï—Å–ª–∏ –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ª–µ–≤–æ.
                this.predictedHorizontalWayToTheLeft = {
                    x: this.x - Math.abs(this.currentSpeedX) + this.width,
                    y: this.y,
                    width: Math.abs(this.currentSpeedX) - this.width,
                    height: this.height
                };
            } else {
                this.predictedHorizontalWayToTheLeft = null;
            };
        };

        /*–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫, –µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ Y.*/
        if (Math.abs(this.currentSpeedY) > this.height) {
            if (this.currentSpeedY > 0) { // –ï—Å–ª–∏ –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–Ω–∏–∑.
                this.predictedVerticalWayDown = {
                    x: this.x,
                    y: this.y + this.height,
                    width: this.width,
                    height: this.currentSpeedY - this.height
                };
            } else {
                this.predictedVerticalWayDown = null;
            };

            if (this.currentSpeedY < 0) { // –ï—Å–ª–∏ –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–≤–µ—Ä—Ö.
                this.predictedVerticalWayUp = {
                    x: this.x,
                    y: this.y - Math.abs(this.currentSpeedY) + this.height,
                    width: this.width,
                    height: Math.abs(this.currentSpeedY) - this.height
                };
            } else {
                this.predictedVerticalWayUp = null;
            };
        };

        /*–°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ –ø—É—Ç–∏,
        –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–π–¥–µ—Ç –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫.*/
        let potentialCollisionsRight = [];
        let potentialCollisionsLeft = [];
        let potentialCollisionsDown = [];
        let potentialCollisionsUp = [];

        for (let i = 0; i < walls.length; i++) { // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–µ–Ω—ã.
            if (this.predictedHorizontalWayToTheRight) { // –ï—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø—É—Ç—å –≤–ø—Ä–∞–≤–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫,
                if (helper.checkIntersectionBetweenTwoNotRotatedRectangles( // —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –æ–Ω —Å –∫–∞–∫–∏–º-—Ç–æ —Å—Ç–µ–Ω–∞–º–∏,
                    this.predictedHorizontalWayToTheRight.x + this.predictedHorizontalWayToTheRight.width, walls[i].x,
                    this.predictedHorizontalWayToTheRight.x, walls[i].x + walls[i].width,
                    this.predictedHorizontalWayToTheRight.y + this.predictedHorizontalWayToTheRight.height, walls[i].y,
                    this.predictedHorizontalWayToTheRight.y, walls[i].y + walls[i].height
                )) { // –∏ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –¥–æ —ç—Ç–æ–π —Å—Ç–µ–Ω—ã.
                    potentialCollisionsRight.push(walls[i].x - this.x - this.width);
                };
            };

            if (this.predictedHorizontalWayToTheLeft) { // –ï—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø—É—Ç—å –≤–ª–µ–≤–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫,
                if (helper.checkIntersectionBetweenTwoNotRotatedRectangles( // —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –æ–Ω —Å –∫–∞–∫–∏–º-—Ç–æ —Å—Ç–µ–Ω–∞–º–∏,
                    this.predictedHorizontalWayToTheLeft.x + this.predictedHorizontalWayToTheLeft.width, walls[i].x,
                    this.predictedHorizontalWayToTheLeft.x, walls[i].x + walls[i].width,
                    this.predictedHorizontalWayToTheLeft.y + this.predictedHorizontalWayToTheLeft.height, walls[i].y,
                    this.predictedHorizontalWayToTheLeft.y, walls[i].y + walls[i].height
                )) { // –∏ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –¥–æ —ç—Ç–æ–π —Å—Ç–µ–Ω—ã.
                    potentialCollisionsLeft.push(this.x - walls[i].x - walls[i].width);
                };
            };

            if (this.predictedVerticalWayDown) { // –ï—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø—É—Ç—å –≤–Ω–∏–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫,
                if (helper.checkIntersectionBetweenTwoNotRotatedRectangles( // —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –æ–Ω —Å –∫–∞–∫–∏–º-—Ç–æ —Å—Ç–µ–Ω–∞–º–∏,
                    this.predictedVerticalWayDown.x + this.predictedVerticalWayDown.width, walls[i].x,
                    this.predictedVerticalWayDown.x, walls[i].x + walls[i].width,
                    this.predictedVerticalWayDown.y + this.predictedVerticalWayDown.height, walls[i].y,
                    this.predictedVerticalWayDown.y, walls[i].y + walls[i].height
                )) { // –∏ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –¥–æ —ç—Ç–æ–π —Å—Ç–µ–Ω—ã.
                    potentialCollisionsDown.push(walls[i].y - this.y - this.height);
                };
            };

            if (this.predictedVerticalWayUp) { // –ï—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø—É—Ç—å –≤–≤–µ—Ä—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫,
                if (helper.checkIntersectionBetweenTwoNotRotatedRectangles( // —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –æ–Ω —Å –∫–∞–∫–∏–º-—Ç–æ —Å—Ç–µ–Ω–∞–º–∏,
                    this.predictedVerticalWayUp.x + this.predictedVerticalWayUp.width, walls[i].x,
                    this.predictedVerticalWayUp.x, walls[i].x + walls[i].width,
                    this.predictedVerticalWayUp.y + this.predictedVerticalWayUp.height, walls[i].y,
                    this.predictedVerticalWayUp.y, walls[i].y + walls[i].height
                )) { // –∏ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –¥–æ —ç—Ç–æ–π —Å—Ç–µ–Ω—ã.
                    potentialCollisionsUp.push(this.y - walls[i].y - walls[i].height);
                };
            };
        };

        /*–°—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –º–∞–ª–µ–Ω—å–∫–∏–µ.*/
        let closestCollisionRight = helper.findTheSmallestElementInArrayOfNumbers(potentialCollisionsRight);
        let closestCollisionLeft = helper.findTheSmallestElementInArrayOfNumbers(potentialCollisionsLeft);
        let closestCollisionDown = helper.findTheSmallestElementInArrayOfNumbers(potentialCollisionsDown);
        let closestCollisionUp = helper.findTheSmallestElementInArrayOfNumbers(potentialCollisionsUp);

        if (game.worldSpeed > 0 && closestCollisionRight) { // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ –∏ –Ω–∞ –µ–≥–æ –ø—É—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –µ—Å—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è,
            //game.worldSpeed = closestCollisionRight; // —Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ –µ–≥–æ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –¥–æ —Å–∞–º–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.

            /*—Ç–æ —Å–¥–≤–∏–≥–∞–µ–º –≤—Å–µ —Å—Ç–µ–Ω–∫–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–æ–π –∫–æ–ª–ª–∏–∑–∏–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–µ—Ä–µ—Å–∫–∞—á–∏–ª–∏ —á–µ—Ä–µ–∑ –∏–≥—Ä–æ–∫–∞.*/
            for (let i = 0; i < walls.length; i++) {
                walls[i].x -= closestCollisionRight;
            };
        };

        if (this.currentSpeedX < 0 && closestCollisionLeft) { // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–ª–µ–≤–æ –∏ –Ω–∞ –µ–≥–æ –ø—É—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –µ—Å—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è,
            this.currentSpeedX = -closestCollisionLeft + 1; // —Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ –µ–≥–æ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –¥–æ —Å–∞–º–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.
        };

        if (this.currentSpeedY > 0 && closestCollisionDown) { // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–Ω–∏–∑ –∏ –Ω–∞ –µ–≥–æ –ø—É—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –µ—Å—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è,
            this.specurrentSpeedYedY = closestCollisionDown - 1; // —Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ –µ–≥–æ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –¥–æ —Å–∞–º–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.
        };

        if (this.currentSpeedY < 0 && closestCollisionUp) { // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–≤–µ—Ä—Ö –∏ –Ω–∞ –µ–≥–æ –ø—É—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –µ—Å—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è,
            this.currentSpeedY = -closestCollisionUp + 1; // —Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ –µ–≥–æ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –¥–æ —Å–∞–º–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.
        };
    };

    this.move = function () {
        if (this.isActive) { // –†–µ–∞–ª–∏–∑—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω.
            /*–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –ø–æ Y.*/
            if (controls.isUpKeyPressed) { // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–æ –≤–≤–µ—Ä—Ö,
                this.currentSpeedY -= this.currentAccelerationY; // —Ç–æ –∑–Ω–∞—á–∏—Ç —É–º–µ–Ω—å—à–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –≤–≤–µ—Ä—Ö.
            };

            /*–ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é.*/
            this.currentSpeedY += this.gravity; // –ö–∞–∂–¥—ã–π —Ç–∏–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y, —á—Ç–æ–±—ã –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫ –∏–≥—Ä–æ–∫—É –¥–≤–∏–≥–∞—Ç—å –µ–≥–æ –≤–Ω–∏–∑.

            if (this.currentAccelerationY !== 0 && this.currentSpeedY < 0) {
                this.currentJumpedDistance += (this.accelerationY - this.gravity);
                this.isPlayerOnTheFloor = false;

                if (this.currentJumpedDistance >= this.maxJumpedDistance) {
                    this.currentAccelerationY = 0;
                    this.currentJumpedDistance = 0;
                    this.color = 'red';
                };
            };

            if (this.isPlayerOnTheFloor) {
                this.color = 'orange';
                this.currentJumpedDistance = 0;
                this.currentAccelerationY = this.accelerationY;
            };

            /*–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞.*/
            if (this.currentSpeedY >= this.maxSpeedY) { // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ Y –≤–≤–µ—Ä—Ö,
                this.currentSpeedY = this.maxSpeedY; // —Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞—à—É —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π.
            } else if (this.currentSpeedY < -this.maxSpeedY) { // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ Y –≤–Ω–∏–∑,
                this.currentSpeedY = -this.maxSpeedY; // —Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞—à—É —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π.
            };

            /*–û–∫—Ä—É–≥–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y –¥–æ —Ü–µ–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ü–æ—Å–∫–æ–ª—å–∫—É –º–µ—Ç–æ–¥ "Math.floor()" –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä,
            "-5,3" –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ "-6", —Ç–æ –µ—Å—Ç—å –º–æ–¥—É–ª—å —á–∏—Å–ª–∞ –ø–æ —Ñ–∞–∫—Ç—É –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É, —Ç–æ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 
            "Math.ceil()".*/
            if (this.currentSpeedY > 0) { // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y –±–æ–ª—å—à–µ 0,
                this.currentSpeedY = Math.floor(this.currentSpeedY); // —Ç–æ –æ–∫—Ä—É–≥–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y —Å–Ω–∏–∑—É. 
            } else {
                this.currentSpeedY = Math.ceil(this.currentSpeedY); // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ 0, —Ç–æ –æ–∫—Ä—É–≥–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y —Å–≤–µ—Ä—Ö—É.
            };

            /*----------------------------*/

            this.predictCollision();

            /*----------------------------*/

            /*–î–≤–∏–≥–∞–µ–º –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ X –∏ Y.*/
            this.y += this.currentSpeedY;
        };
    };

    this.checkIfPlayerIsInAPit = function () {
        if (players.playerOne.y > canvas.height) {
            players.playerOne.isActive = false;
        };
    };

    this.drawPredictedWays = function () {
        if (this.predictedHorizontalWayToTheRight) {
            ctx.fillStyle = 'blue';
            ctx.fillRect(this.predictedHorizontalWayToTheRight.x, this.predictedHorizontalWayToTheRight.y, this.predictedHorizontalWayToTheRight.width, this.predictedHorizontalWayToTheRight.height);
        };

        if (this.predictedHorizontalWayToTheLeft) {
            ctx.fillStyle = 'green';
            ctx.fillRect(this.predictedHorizontalWayToTheLeft.x, this.predictedHorizontalWayToTheLeft.y, this.predictedHorizontalWayToTheLeft.width, this.predictedHorizontalWayToTheLeft.height);
        };

        if (this.predictedVerticalWayDown) {
            ctx.fillStyle = 'red';
            ctx.fillRect(this.predictedVerticalWayDown.x, this.predictedVerticalWayDown.y, this.predictedVerticalWayDown.width, this.predictedVerticalWayDown.height);
        };

        if (this.predictedVerticalWayUp) {
            ctx.fillStyle = 'violet';
            ctx.fillRect(this.predictedVerticalWayUp.x, this.predictedVerticalWayUp.y, this.predictedVerticalWayUp.width, this.predictedVerticalWayUp.height);
        };
    };

    this.drawPlayerCoordinates = function () {
        ctx.font = '10px serif';
        ctx.fillStyle = 'white';
        ctx.fillText(this.x + ':' + this.y, this.x, this.y + 15);
        ctx.fillText((this.x + this.width) + ':' + this.y, this.x + this.width, this.y + 30);
        ctx.fillText(this.x + ':' + (this.y + this.height), this.x, this.y + this.height);
        ctx.fillText((this.x + this.width) + ':' + (this.y + this.height), this.x + this.width, this.y + this.height - 15);
    };

    this.draw = function () {
        // this.drawPredictedWays();

        img = new Image;
        img.src = this.src;
        ctx.drawImage(img, this.x, this.y)

        // this.drawPlayerCoordinates();
    };
};

/*-------------------------------------------------------------------------------------------------------------*/

let walls = [
    new Wall(
        0, 550,
        1200, 450,
        helper.getRandomColor(), 1,
        2
    )
];

function Wall(
    x, y,
    width, height,
    color, id,
    type
) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.color = color;
    this.id = id;
    this.type = type;

    /*–ú–µ—Ç–æ–¥ –¥–ª—è —Å–¥–≤–∏–≥–∞ —Å—Ç–µ–Ω–∫–∏ –≤–ª–µ–≤–æ.*/
    this.move = function (speedX) {
        this.x -= speedX;
    };

    this.drawWallsCoordinates = function () {
        ctx.font = '10px serif';
        ctx.fillStyle = 'white';
        ctx.fillText(this.x + ':' + this.y, this.x, this.y + 15);
        ctx.fillText((this.x + this.width) + ':' + this.y, this.x + this.width, this.y + 30);
        ctx.fillText(this.x + ':' + (this.y + this.height), this.x, this.y + this.height);
        ctx.fillText((this.x + this.width) + ':' + (this.y + this.height), this.x + this.width, this.y + this.height - 15);
    };

    this.drawWallsID = function () {
        ctx.font = '30px Arial';
        ctx.fillStyle = 'white';
        ctx.fillText(this.id, this.x + this.width / 2, this.y + this.height / 2);
    };

    this.draw = function () {
        if (this.type === 1) {
            ctx.fillStyle = 'white';
        } else if (this.type === 2) {
            ctx.fillStyle = this.color;
        };

        ctx.fillRect(this.x, this.y, this.width, this.height);

        // this.drawWallsCoordinates();
        this.drawWallsID();
    };
};

/*-------------------------------------------------------------------------------------------------------------*/

let backgrounds = [
    new Background('./src/images/background-one.png', 0, 115),
    new Background('./src/images/background-two.png', 800, 115),
    new Background('./src/images/background-two.png', 1600, 115)
];

function Background(src, x, y) {
    this.src = src;
    this.x = x;
    this.y = y;

    this.move = function (speedX) {
        this.x -= speedX;
    };

    this.drawBackground = function () {
        let firstBackground = new Image();
        firstBackground.src = this.src;
        ctx.drawImage(firstBackground, this.x, this.y);
    };
};

/*-------------------------------------------------------------------------------------------------------------*/

let audio = {
    volume: 0.05,

    generateLoseSound: function () {
        return new Audio('./src/sounds/default-sounds/lose-sound-default.wav');
    },

    defaultBackgroundMusic: new Audio('./src/music/03WhatUNeed.mp3'),

    isBackgroundMusicPaused: false,

    playSound: function (sound) {
        sound.volume = audio.volume;
        sound.play();
    },

    pauseSound: function (sound) {
        audio.defaultBackgroundMusic.currentTime = 0;

        sound.volume = audio.volume;
        sound.pause();
    },

    initiateBackgroudMusicLooping: function () {
        audio.defaultBackgroundMusic.loop = true;
    }
};

audio.initiateBackgroudMusicLooping();

/*-------------------------------------------------------------------------------------------------------------*/